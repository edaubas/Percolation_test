{"version":3,"sources":["components/GridSquare.js","App.js","reportWebVitals.js","index.js"],"names":["GridSquare","props","classes","color","className","onClick","row","col","App","ocSquare","gridUnion","state","topRow","bottomRow","leftCol","rightCol","union","rows","cols","refreshGrid","gridComp","handleChangeCols","bind","handleChangeRows","createGrid","root","event","this","setState","parseInt","target","value","replace","push","rootRow","rootCol","size","length","square","prevRow","prevCol","connected","a","b","rootA","rootB","console","log","rowA","rowB","colA","colB","style","width","onSubmit","handleSubmit","type","id","onChange","gridTemplateColumns","topBottomConnected","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed960923.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// Represents a grid square with a color\r\n\r\nexport default function GridSquare(props) {\r\n    const classes = `grid-square color-${props.color}`\r\n    // return <div className={classes} onClick={() => props.onClick(props.row,props.col)}>{props.rootRow}{props.rootCol}</div>\r\n    return <div className={classes} onClick={() => props.onClick(props.row,props.col)}/>\r\n}","\nimport React from 'react';\nimport GridSquare from './components/GridSquare';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: 0,\n      cols: 0,\n      gridComp: [],\n      gridUnion: [],\n    }\n\n    this.handleChangeCols = this.handleChangeCols.bind(this);\n    this.handleChangeRows = this.handleChangeRows.bind(this);\n    this.createGrid = this.createGrid.bind(this);\n    this.refreshGrid = this.refreshGrid.bind(this);\n    this.root = this.root.bind(this);\n    this.union = this.union.bind(this);\n\n  }\n\n  handleChangeCols(event) {\n    this.setState({ cols: parseInt(event.target.value.replace(/\\+|-/ig, '')) });\n  }\n\n  handleChangeRows(event) {\n    this.setState({ rows: parseInt(event.target.value.replace(/\\+|-/ig, '')) });\n  }\n\n  createGrid() {\n\n    let gridComp = [];\n    let gridUnion = [];\n\n    for (let row = 0; row <= this.state.rows; row++) {\n\n      if (row === 0) {\n        //Virtual top site\n        gridUnion.push([{ rootRow: 0, rootCol: 0, color: 1, size: 0 }]);\n        gridComp.push([]);\n      } else {\n        gridComp.push([]);\n        gridUnion.push([]);\n        for (let col = 0; col < this.state.cols; col++) {\n          gridUnion[row].push({ rootRow: row, rootCol: col, color: 0, size: 0 });\n          gridComp[row].push(\n            <GridSquare\n              key={`${row}${col}`}\n              color={gridUnion[row][col].color}\n              row={row}\n              col={col}\n              rootRow={row}\n              rootCol={col}\n              onClick={this.ocSquare}\n            />);\n        }\n      }\n    }\n\n    //Virtual bottom site\n    gridUnion.push([]);\n    gridUnion[this.state.rows + 1].push({ rootRow: this.state.rows + 1, rootCol: 0, color: 1, size: 0 });\n\n    this.setState({ gridComp: gridComp, gridUnion: gridUnion });\n\n  }\n\n  refreshGrid(gridUnion) {\n\n    let gridComp = [];\n    let length = gridUnion.length - 1.\n\n    gridComp.push([]);\n    for (let row = 1; row < length; row++) {\n      gridComp.push([]);\n      for (let col = 0; col < gridUnion[row].length; col++) {\n        gridComp[row].push(\n          <GridSquare\n            key={`${row}${col}`}\n            color={gridUnion[row][col].color}\n            row={row}\n            col={col}\n            rootRow={gridUnion[row][col].rootRow}\n            rootCol={gridUnion[row][col].rootCol}\n            onClick={this.ocSquare}\n          />);\n      }\n    }\n\n    this.setState({ gridComp: gridComp, gridUnion: gridUnion });\n\n  }\n\n  //Open new site\n  ocSquare = (row, col) => {\n\n    //Get current state of the grid\n    let gridUnion = this.state.gridUnion;\n\n    //Validate if the site is closed\n    if (gridUnion[row][col].color === 0) {\n\n      //Get coordinates from surrounding sites\n      let topRow = row - 1;\n      let bottomRow = row + 1;\n      let leftCol = col - 1;\n      let rightCol = col + 1;\n\n\n      if (row > 1) {\n        //Connect with site above\n        let top = gridUnion[topRow][col];\n        top.color === 1 && this.union(gridUnion, { row, col }, { row: topRow, col });\n\n      } else if (row === 1) {\n        //Connect with virtual top site\n        this.union(gridUnion, { row, col }, { row: 0, col: 0 });\n\n      }\n\n      if (row < this.state.rows) {\n        //Connect with site below\n        let bottom = gridUnion[bottomRow][col];\n        bottom.color === 1 && this.union(gridUnion, { row, col }, { row: bottomRow, col });\n\n      } else if (row === this.state.rows) {\n        //Connect with virtual bottom site\n        this.union(gridUnion, { row, col }, { row: this.state.rows + 1, col: 0 });\n\n      }\n\n      if (col > 0) {\n        //Connect with left site\n        let left = gridUnion[row][leftCol];\n        left.color === 1 && this.union(gridUnion, { row, col }, { row, col: leftCol });\n\n      }\n\n      if (col < this.state.cols - 1) {\n        //Connect with right site\n        let right = gridUnion[row][rightCol];\n        right.color === 1 && this.union(gridUnion, { row, col }, { row, col: rightCol });\n\n      }\n\n      gridUnion[row][col].color = 1;\n      //Update grid state\n      this.refreshGrid(gridUnion);\n\n    }\n\n  }\n\n  root(square) {\n\n    const { gridUnion } = this.state;\n\n    let row = square.rootRow;\n    let col = square.rootCol;\n\n    while (row !== gridUnion[row][col].rootRow && col !== gridUnion[row][col].rootCol) {\n\n      let prevRow = row;\n      let prevCol = col;\n\n      row = gridUnion[prevRow][prevCol].rootRow;\n      col = gridUnion[prevRow][prevCol].rootCol;\n\n      // console.log(\n      //   'From: ' + row + col +\n      //   'To: ' + gridUnion[row][col].rootRow + gridUnion[row][col].rootCol\n      // );\n    }\n    return { row, col };\n  }\n\n  topBottomConnected() {\n    return this.connected(this.state.gridUnion, { row: 0, col: 0 }, { row: this.state.rows + 1, col: 0 })\n  }\n\n  connected(gridUnion, a, b) {\n\n    let rootA = this.root(gridUnion[a.row][a.col]);\n    let rootB = this.root(gridUnion[b.row][b.col]);\n\n    console.log(rootA.row + rootA.col + ' - ' + rootB.row + rootB.col);\n    console.log(rootA.col === rootB.col && rootA.row === rootB.row ? true : false);\n\n    return rootA.col === rootB.col && rootA.row === rootB.row ? true : false;\n\n  }\n\n  union(gridUnion, a, b) {\n\n    let rootA = this.root(gridUnion[a.row][a.col]);\n    let rootB = this.root(gridUnion[b.row][b.col]);\n\n    let rowA = rootA.row;\n    let rowB = rootB.row;\n    let colA = rootA.col;\n    let colB = rootB.col;\n\n    if (rowA !== rowB || colA !== colB) {\n\n      if (gridUnion[rowA][colA].size > gridUnion[rowB][colB].size) {\n\n        gridUnion[rowB][colB].rootRow = rootA.row;\n        gridUnion[rowB][colB].rootCol = rootA.col;\n        ++gridUnion[rowA][colA].size\n        gridUnion[rowA][colA].size += gridUnion[rowB][colB].size;\n\n      } else {\n\n        gridUnion[rowA][colA].rootRow = rootB.row;\n        gridUnion[rowA][colA].rootCol = rootB.col;\n\n        if (gridUnion[rowA][colA].size === 0) {\n\n          ++gridUnion[rowB][colB].size\n\n        } else {\n\n          ++gridUnion[rowB][colB].size\n          gridUnion[rowB][colB].size += gridUnion[rowA][colA].size;\n        }\n\n      }\n    }\n\n    // console.log('A:' + rootA.row + rootA.col +\n    //   ' Size:' + gridUnion[rootA.row][rootA.col].size +\n    //   ' Root:' + gridUnion[rootA.row][rootA.col].rootRow + gridUnion[rootA.row][rootA.col].rootCol)\n    // console.log('B:' + rootB.row + rootB.col +\n    //   ' Size:' + gridUnion[rootB.row][rootB.col].size +\n    //   ' Root:' + gridUnion[rootB.row][rootB.col].rootRow + gridUnion[rootB.row][rootB.col].rootCol)\n\n  }\n\n\n  render() {\n\n    const { gridComp } = this.state;\n\n    return (\n\n      gridComp.length === 0 ?\n        <div className=\"App\" style={{width: '40rem'}}>\n          <h1>Percolation</h1>\n          <p>\n            Given a composite systems comprised of randomly distributed insulating and metallic materials:\n          what fraction of the materials need to be metallic so that the composite system is an electrical\n          conductor? Given a porous landscape with water on the surface (or oil below), under what conditions\n          will the water be able to drain through to the bottom (or the oil to gush through to the surface)?\n              Scientists have defined an abstract process known as percolation to model such situations</p>\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              Number of columns:\n          <input type=\"text\" id='x' value={this.state.cols} onChange={this.handleChangeCols} />\n            </label>\n            <label>\n              Number of rows:\n          <input type=\"text\" id='y' value={this.state.rows} onChange={this.handleChangeRows} />\n            </label>\n            <input type=\"submit\" value=\"Submit\" onClick={this.createGrid} />\n          </form>\n        </div>\n\n        :\n\n        <div className=\"App\">\n          <div className='grid-board' style={{ gridTemplateColumns: `repeat(${this.state.cols},30px)` }}>\n            {gridComp}\n          </div>\n          {\n            this.topBottomConnected() ? <h1>Percolates</h1> : <h1>Does not percolates</h1>\n          }\n        </div>\n\n    )\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}